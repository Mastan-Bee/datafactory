{
	"name": "dataflow_silver_to_gold",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_dl_silver_order_items",
						"type": "DatasetReference"
					},
					"name": "OrderItems"
				},
				{
					"dataset": {
						"referenceName": "ds_dl_silver_customer",
						"type": "DatasetReference"
					},
					"name": "Customers"
				},
				{
					"dataset": {
						"referenceName": "ds_dl_silver_products",
						"type": "DatasetReference"
					},
					"name": "Products"
				},
				{
					"dataset": {
						"referenceName": "ds_dl_silver_stores",
						"type": "DatasetReference"
					},
					"name": "Stores"
				},
				{
					"dataset": {
						"referenceName": "ds_dl_silver_orders",
						"type": "DatasetReference"
					},
					"name": "Orders"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_dl_gold_parquet",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "AzureSqlTable1",
						"type": "DatasetReference"
					},
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "join1"
				},
				{
					"name": "join2"
				},
				{
					"name": "join3"
				},
				{
					"name": "join4"
				},
				{
					"name": "select1"
				},
				{
					"name": "select2"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "AlterRow1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ORDER_ID as integer,",
				"          LINE_ITEM_ID as integer,",
				"          PRODUCT_ID as integer,",
				"          UNIT_PRICE as float,",
				"          QUANTITY as integer,",
				"          Ingestion_Date as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> OrderItems",
				"source(output(",
				"          CUSTOMER_ID as integer,",
				"          FULL_NAME as string,",
				"          EMAIL_ADDRESS as string,",
				"          Ingestion_Date as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> Customers",
				"source(output(",
				"          PRODUCT_ID as integer,",
				"          PRODUCT_NAME as string,",
				"          UNIT_PRICE as float,",
				"          Ingestion_Date as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> Products",
				"source(output(",
				"          STORE_ID as integer,",
				"          STORE_NAME as string,",
				"          WEB_ADDRESS as string,",
				"          LATITUDE as float,",
				"          LONGITUDE as float,",
				"          Ingestion_Date as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> Stores",
				"source(output(",
				"          ORDER_ID as integer,",
				"          ORDER_DATETIME as timestamp,",
				"          CUSTOMER_ID as integer,",
				"          ORDER_STATUS as string,",
				"          STORE_ID as integer,",
				"          Ingestion_Date as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> Orders",
				"OrderItems, Products join(OrderItems@PRODUCT_ID == Products@PRODUCT_ID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1, Orders join(OrderItems@ORDER_ID == Orders@ORDER_ID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"join2, Customers join(Orders@CUSTOMER_ID == Customers@CUSTOMER_ID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join3",
				"join3, Stores join(Orders@STORE_ID == Stores@STORE_ID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join4",
				"join4 select(mapColumn(",
				"          ORDER_ID = OrderItems@ORDER_ID,",
				"          LINE_ITEM_ID,",
				"          PRODUCT_ID = OrderItems@PRODUCT_ID,",
				"          UNIT_PRICE = OrderItems@UNIT_PRICE,",
				"          QUANTITY,",
				"          Ingestion_Date = OrderItems@Ingestion_Date,",
				"          PRODUCT_NAME,",
				"          UNIT_PRICE = Products@UNIT_PRICE,",
				"          ORDER_DATETIME,",
				"          CUSTOMER_ID = Orders@CUSTOMER_ID,",
				"          ORDER_STATUS,",
				"          STORE_ID = Orders@STORE_ID,",
				"          FULL_NAME,",
				"          EMAIL_ADDRESS,",
				"          STORE_NAME,",
				"          WEB_ADDRESS,",
				"          LATITUDE,",
				"          LONGITUDE",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"join4 select(mapColumn(",
				"          ORDER_ID = OrderItems@ORDER_ID,",
				"          PRODUCT_ID = OrderItems@PRODUCT_ID,",
				"          UNIT_PRICE = OrderItems@UNIT_PRICE,",
				"          QUANTITY,",
				"          CUSTOMER_ID = Orders@CUSTOMER_ID,",
				"          ORDER_STATUS,",
				"          STORE_ID = Orders@STORE_ID,",
				"          ORDER_DATETIME",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select2 derive(ORDER_DATE = toDate(ORDER_DATETIME),",
				"          SUB_TOTAL = UNIT_PRICE*QUANTITY,",
				"          ORDER_ITEM_ID = ORDER_ID,",
				"          UPDATED_TIMESTAMP = currentTimestamp()) ~> derivedColumn1",
				"derivedColumn1 alterRow(upsertIf(true())) ~> AlterRow1",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1",
				"AlterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          ORDER_ITEM_ID as integer,",
				"          ORDER_ID as integer,",
				"          ORDER_DATE as date,",
				"          CUSTOMER_ID as integer,",
				"          ORDER_STATUS as string,",
				"          STORE_ID as integer,",
				"          PRODUCT_ID as integer,",
				"          UNIT_PRICE as decimal(18,0),",
				"          QUANTITY as integer,",
				"          SUBTOTAL as decimal(18,0),",
				"          UPDATED_TIMESTAMP as timestamp",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:true,",
				"     keys:['ORDER_ID','PRODUCT_ID'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          ORDER_ITEM_ID,",
				"          ORDER_ID,",
				"          ORDER_DATE,",
				"          CUSTOMER_ID,",
				"          ORDER_STATUS,",
				"          STORE_ID,",
				"          PRODUCT_ID,",
				"          UNIT_PRICE,",
				"          QUANTITY,",
				"          SUBTOTAL = SUB_TOTAL,",
				"          UPDATED_TIMESTAMP",
				"     )) ~> sink2"
			]
		}
	}
}