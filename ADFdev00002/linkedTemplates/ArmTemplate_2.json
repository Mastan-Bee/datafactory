{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "ADFdev00002"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/ds_dl_silver_products')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_datalakestorage00002",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "products",
						"fileSystem": "silver"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "PRODUCT_ID",
						"type": "INT32"
					},
					{
						"name": "PRODUCT_NAME",
						"type": "UTF8"
					},
					{
						"name": "UNIT_PRICE",
						"type": "FLOAT"
					},
					{
						"name": "Ingestion_Date",
						"type": "DATE"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_dl_silver_stores')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_datalakestorage00002",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "stores",
						"fileSystem": "silver"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "STORE_ID",
						"type": "INT32"
					},
					{
						"name": "STORE_NAME",
						"type": "UTF8"
					},
					{
						"name": "WEB_ADDRESS",
						"type": "UTF8"
					},
					{
						"name": "LATITUDE",
						"type": "FLOAT"
					},
					{
						"name": "LONGITUDE",
						"type": "FLOAT"
					},
					{
						"name": "Ingestion_Date",
						"type": "DATE"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/tg_schedule')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pipeline1",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Minute",
						"interval": 1,
						"startTime": "2024-09-01T08:35:00",
						"timeZone": "India Standard Time"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/tg_tumbling1')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipeline": {
					"pipelineReference": {
						"referenceName": "pipeline1",
						"type": "PipelineReference"
					},
					"parameters": {}
				},
				"type": "TumblingWindowTrigger",
				"typeProperties": {
					"frequency": "Minute",
					"interval": 5,
					"startTime": "2024-09-01T03:05:00Z",
					"delay": "00:00:00",
					"maxConcurrency": 50,
					"retryPolicy": {
						"intervalInSeconds": 30
					},
					"dependsOn": []
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/copy files in bulk')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"modifiedDatetimeStart": "2024-07-10T00:00:00Z",
									"modifiedDatetimeEnd": "2024-07-10T16:00:00Z",
									"deleteFilesAfterCompletion": false
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Binary1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Binary2",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-07-10T10:37:12Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/old files')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"modifiedDatetimeStart": "2024-07-04T00:00:00Z",
									"modifiedDatetimeEnd": "2024-07-09T17:00:00Z",
									"deleteFilesAfterCompletion": false
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Binary3",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Binary5",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-07-11T11:05:51Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/tg_tumblingdependency')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipeline": {
					"pipelineReference": {
						"referenceName": "pipeline1",
						"type": "PipelineReference"
					},
					"parameters": {}
				},
				"type": "TumblingWindowTrigger",
				"typeProperties": {
					"frequency": "Minute",
					"interval": 5,
					"startTime": "2024-09-01T03:25:00Z",
					"delay": "00:00:00",
					"maxConcurrency": 50,
					"retryPolicy": {
						"intervalInSeconds": 30
					},
					"dependsOn": [
						{
							"type": "TumblingWindowTriggerDependencyReference",
							"referenceTrigger": {
								"referenceName": "tg_tumbling1",
								"type": "TriggerReference"
							}
						}
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/triggers/tg_tumbling1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_bronze_to_silver')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_dl_bronze_order_items",
								"type": "DatasetReference"
							},
							"name": "OrderItems"
						},
						{
							"dataset": {
								"referenceName": "ds_dl_bronze_customers",
								"type": "DatasetReference"
							},
							"name": "Customers"
						},
						{
							"dataset": {
								"referenceName": "ds_dl_bronze_products",
								"type": "DatasetReference"
							},
							"name": "Products"
						},
						{
							"dataset": {
								"referenceName": "ds_dl_bronze_stores",
								"type": "DatasetReference"
							},
							"name": "Stores"
						},
						{
							"dataset": {
								"referenceName": "ds_dl_bronze_order",
								"type": "DatasetReference"
							},
							"name": "Orders"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_dl_silver_order_items",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "ds_dl_silver_customer",
								"type": "DatasetReference"
							},
							"name": "sink2"
						},
						{
							"dataset": {
								"referenceName": "ds_dl_silver_products",
								"type": "DatasetReference"
							},
							"name": "sink3"
						},
						{
							"dataset": {
								"referenceName": "ds_dl_silver_stores",
								"type": "DatasetReference"
							},
							"name": "sink4"
						},
						{
							"dataset": {
								"referenceName": "ds_dl_silver_orders",
								"type": "DatasetReference"
							},
							"name": "sink5"
						}
					],
					"transformations": [
						{
							"name": "casttochangedatatypeoforderitems"
						},
						{
							"name": "casttochangedatatypeofcustomers"
						},
						{
							"name": "casttochangedatatypeofProducts"
						},
						{
							"name": "casttochangedatatypeofstores"
						},
						{
							"name": "casttochangedatatypeoforders"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "derivedColumn3"
						},
						{
							"name": "derivedColumn4"
						},
						{
							"name": "derivedColumn5"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ORDER_ID as string,",
						"          LINE_ITEM_ID as string,",
						"          PRODUCT_ID as string,",
						"          UNIT_PRICE as string,",
						"          QUANTITY as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> OrderItems",
						"source(output(",
						"          CUSTOMER_ID as string,",
						"          FULL_NAME as string,",
						"          EMAIL_ADDRESS as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> Customers",
						"source(output(",
						"          PRODUCT_ID as string,",
						"          PRODUCT_NAME as string,",
						"          UNIT_PRICE as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> Products",
						"source(output(",
						"          STORE_ID as string,",
						"          STORE_NAME as string,",
						"          WEB_ADDRESS as string,",
						"          LATITUDE as string,",
						"          LONGITUDE as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> Stores",
						"source(output(",
						"          ORDER_ID as string,",
						"          ORDER_DATETIME as string,",
						"          CUSTOMER_ID as string,",
						"          ORDER_STATUS as string,",
						"          STORE_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> Orders",
						"OrderItems cast(output(",
						"          ORDER_ID as integer,",
						"          LINE_ITEM_ID as integer,",
						"          PRODUCT_ID as integer,",
						"          UNIT_PRICE as float,",
						"          QUANTITY as integer",
						"     ),",
						"     errors: true) ~> casttochangedatatypeoforderitems",
						"Customers cast(output(",
						"          CUSTOMER_ID as integer",
						"     ),",
						"     errors: true) ~> casttochangedatatypeofcustomers",
						"Products cast(output(",
						"          PRODUCT_ID as integer,",
						"          UNIT_PRICE as float",
						"     ),",
						"     errors: true) ~> casttochangedatatypeofProducts",
						"Stores cast(output(",
						"          STORE_ID as integer,",
						"          LATITUDE as float,",
						"          LONGITUDE as float",
						"     ),",
						"     errors: true) ~> casttochangedatatypeofstores",
						"Orders cast(output(",
						"          ORDER_ID as integer,",
						"          CUSTOMER_ID as integer,",
						"          ORDER_STATUS as string,",
						"          STORE_ID as integer",
						"     ),",
						"     errors: true) ~> casttochangedatatypeoforders",
						"casttochangedatatypeoforderitems derive(Ingestion_Date = currentDate()) ~> derivedColumn1",
						"casttochangedatatypeofcustomers derive(Ingestion_Date = currentDate()) ~> derivedColumn2",
						"casttochangedatatypeofProducts derive(Ingestion_Date = currentDate()) ~> derivedColumn3",
						"casttochangedatatypeofstores derive(Ingestion_Date = currentDate()) ~> derivedColumn4",
						"casttochangedatatypeoforders derive(Ingestion_Date = currentDate(),",
						"          ORDER_DATETIME = toTimestamp(ORDER_DATETIME,'dd-MMM-yy HH.mm.ss.SS')) ~> derivedColumn5",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ORDER_ID as integer,",
						"          LINE_ITEM_ID as integer,",
						"          PRODUCT_ID as integer,",
						"          UNIT_PRICE as float,",
						"          QUANTITY as integer,",
						"          Ingestion_Date as date",
						"     ),",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1",
						"derivedColumn2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          CUSTOMER_ID as integer,",
						"          FULL_NAME as string,",
						"          EMAIL_ADDRESS as string,",
						"          Ingestion_Date as date",
						"     ),",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink2",
						"derivedColumn3 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          PRODUCT_ID as integer,",
						"          PRODUCT_NAME as string,",
						"          UNIT_PRICE as float,",
						"          Ingestion_Date as date",
						"     ),",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink3",
						"derivedColumn4 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          STORE_ID as integer,",
						"          STORE_NAME as string,",
						"          WEB_ADDRESS as string,",
						"          LATITUDE as float,",
						"          LONGITUDE as float,",
						"          Ingestion_Date as date",
						"     ),",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink4",
						"derivedColumn5 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ORDER_ID as integer,",
						"          ORDER_DATETIME as timestamp,",
						"          CUSTOMER_ID as integer,",
						"          ORDER_STATUS as string,",
						"          STORE_ID as integer,",
						"          Ingestion_Date as date",
						"     ),",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink5"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_dl_silver_products')]",
				"[concat(variables('factoryId'), '/datasets/ds_dl_silver_stores')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_silver_to_gold')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_dl_silver_order_items",
								"type": "DatasetReference"
							},
							"name": "OrderItems"
						},
						{
							"dataset": {
								"referenceName": "ds_dl_silver_customer",
								"type": "DatasetReference"
							},
							"name": "Customers"
						},
						{
							"dataset": {
								"referenceName": "ds_dl_silver_products",
								"type": "DatasetReference"
							},
							"name": "Products"
						},
						{
							"dataset": {
								"referenceName": "ds_dl_silver_stores",
								"type": "DatasetReference"
							},
							"name": "Stores"
						},
						{
							"dataset": {
								"referenceName": "ds_dl_silver_orders",
								"type": "DatasetReference"
							},
							"name": "Orders"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_dl_gold_parquet",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "join1"
						},
						{
							"name": "join2"
						},
						{
							"name": "join3"
						},
						{
							"name": "join4"
						},
						{
							"name": "select1"
						},
						{
							"name": "select2"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "AlterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ORDER_ID as integer,",
						"          LINE_ITEM_ID as integer,",
						"          PRODUCT_ID as integer,",
						"          UNIT_PRICE as float,",
						"          QUANTITY as integer,",
						"          Ingestion_Date as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> OrderItems",
						"source(output(",
						"          CUSTOMER_ID as integer,",
						"          FULL_NAME as string,",
						"          EMAIL_ADDRESS as string,",
						"          Ingestion_Date as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> Customers",
						"source(output(",
						"          PRODUCT_ID as integer,",
						"          PRODUCT_NAME as string,",
						"          UNIT_PRICE as float,",
						"          Ingestion_Date as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> Products",
						"source(output(",
						"          STORE_ID as integer,",
						"          STORE_NAME as string,",
						"          WEB_ADDRESS as string,",
						"          LATITUDE as float,",
						"          LONGITUDE as float,",
						"          Ingestion_Date as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> Stores",
						"source(output(",
						"          ORDER_ID as integer,",
						"          ORDER_DATETIME as timestamp,",
						"          CUSTOMER_ID as integer,",
						"          ORDER_STATUS as string,",
						"          STORE_ID as integer,",
						"          Ingestion_Date as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> Orders",
						"OrderItems, Products join(OrderItems@PRODUCT_ID == Products@PRODUCT_ID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1, Orders join(OrderItems@ORDER_ID == Orders@ORDER_ID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"join2, Customers join(Orders@CUSTOMER_ID == Customers@CUSTOMER_ID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join3",
						"join3, Stores join(Orders@STORE_ID == Stores@STORE_ID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join4",
						"join4 select(mapColumn(",
						"          ORDER_ID = OrderItems@ORDER_ID,",
						"          LINE_ITEM_ID,",
						"          PRODUCT_ID = OrderItems@PRODUCT_ID,",
						"          UNIT_PRICE = OrderItems@UNIT_PRICE,",
						"          QUANTITY,",
						"          Ingestion_Date = OrderItems@Ingestion_Date,",
						"          PRODUCT_NAME,",
						"          UNIT_PRICE = Products@UNIT_PRICE,",
						"          ORDER_DATETIME,",
						"          CUSTOMER_ID = Orders@CUSTOMER_ID,",
						"          ORDER_STATUS,",
						"          STORE_ID = Orders@STORE_ID,",
						"          FULL_NAME,",
						"          EMAIL_ADDRESS,",
						"          STORE_NAME,",
						"          WEB_ADDRESS,",
						"          LATITUDE,",
						"          LONGITUDE",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"join4 select(mapColumn(",
						"          ORDER_ID = OrderItems@ORDER_ID,",
						"          PRODUCT_ID = OrderItems@PRODUCT_ID,",
						"          UNIT_PRICE = OrderItems@UNIT_PRICE,",
						"          QUANTITY,",
						"          CUSTOMER_ID = Orders@CUSTOMER_ID,",
						"          ORDER_STATUS,",
						"          STORE_ID = Orders@STORE_ID,",
						"          ORDER_DATETIME",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2 derive(ORDER_DATE = toDate(ORDER_DATETIME),",
						"          SUB_TOTAL = UNIT_PRICE*QUANTITY,",
						"          ORDER_ITEM_ID = ORDER_ID,",
						"          UPDATED_TIMESTAMP = currentTimestamp()) ~> derivedColumn1",
						"derivedColumn1 alterRow(upsertIf(true())) ~> AlterRow1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1",
						"AlterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ORDER_ITEM_ID as integer,",
						"          ORDER_ID as integer,",
						"          ORDER_DATE as date,",
						"          CUSTOMER_ID as integer,",
						"          ORDER_STATUS as string,",
						"          STORE_ID as integer,",
						"          PRODUCT_ID as integer,",
						"          UNIT_PRICE as decimal(18,0),",
						"          QUANTITY as integer,",
						"          SUBTOTAL as decimal(18,0),",
						"          UPDATED_TIMESTAMP as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ORDER_ID','PRODUCT_ID'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ORDER_ITEM_ID,",
						"          ORDER_ID,",
						"          ORDER_DATE,",
						"          CUSTOMER_ID,",
						"          ORDER_STATUS,",
						"          STORE_ID,",
						"          PRODUCT_ID,",
						"          UNIT_PRICE,",
						"          QUANTITY,",
						"          SUBTOTAL = SUB_TOTAL,",
						"          UPDATED_TIMESTAMP",
						"     )) ~> sink2"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_dl_silver_products')]",
				"[concat(variables('factoryId'), '/datasets/ds_dl_silver_stores')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline_project1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ds_blob_input_binary",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_blob_binary_landing",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_blob_binary_landing",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "switch",
									"type": "Switch",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"on": {
											"value": "@split(item().name,'.')[1]",
											"type": "Expression"
										},
										"cases": [
											{
												"value": "txt",
												"activities": [
													{
														"name": "Copy data landing to bronze txt",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "DelimitedTextSource",
																"storeSettings": {
																	"type": "AzureBlobStorageReadSettings",
																	"recursive": true,
																	"wildcardFileName": "*txt",
																	"enablePartitionDiscovery": false
																},
																"formatSettings": {
																	"type": "DelimitedTextReadSettings"
																}
															},
															"sink": {
																"type": "DelimitedTextSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "DelimitedTextWriteSettings",
																	"quoteAllText": true,
																	"fileExtension": ".txt"
																}
															},
															"enableStaging": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "ds_blob_landing_2",
																"type": "DatasetReference",
																"parameters": {}
															}
														],
														"outputs": [
															{
																"referenceName": "ds_dl_bronze_txt_2",
																"type": "DatasetReference",
																"parameters": {}
															}
														]
													},
													{
														"name": "Copy data landing to archive",
														"type": "Copy",
														"dependsOn": [
															{
																"activity": "Copy data landing to bronze txt",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "DelimitedTextSource",
																"storeSettings": {
																	"type": "AzureBlobStorageReadSettings",
																	"recursive": true,
																	"wildcardFileName": "*txt",
																	"enablePartitionDiscovery": false
																},
																"formatSettings": {
																	"type": "DelimitedTextReadSettings"
																}
															},
															"sink": {
																"type": "DelimitedTextSink",
																"storeSettings": {
																	"type": "AzureBlobStorageWriteSettings"
																},
																"formatSettings": {
																	"type": "DelimitedTextWriteSettings",
																	"quoteAllText": true,
																	"fileExtension": ".txt"
																}
															},
															"enableStaging": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "ds_blob_landing_2",
																"type": "DatasetReference",
																"parameters": {}
															}
														],
														"outputs": [
															{
																"referenceName": "ds_blob_archive_txt",
																"type": "DatasetReference",
																"parameters": {}
															}
														]
													},
													{
														"name": "Delete from landing",
														"type": "Delete",
														"dependsOn": [
															{
																"activity": "Copy data landing to archive",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataset": {
																"referenceName": "ds_blob_landing_2",
																"type": "DatasetReference",
																"parameters": {}
															},
															"enableLogging": false,
															"storeSettings": {
																"type": "AzureBlobStorageReadSettings",
																"recursive": true,
																"wildcardFileName": "*txt",
																"enablePartitionDiscovery": false
															}
														}
													}
												]
											},
											{
												"value": "json",
												"activities": [
													{
														"name": "Copy data landing to bronze json",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "JsonSource",
																"storeSettings": {
																	"type": "AzureBlobStorageReadSettings",
																	"recursive": true,
																	"wildcardFileName": "*json",
																	"enablePartitionDiscovery": false
																},
																"formatSettings": {
																	"type": "JsonReadSettings"
																}
															},
															"sink": {
																"type": "JsonSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "JsonWriteSettings"
																}
															},
															"enableStaging": false
														},
														"inputs": [
															{
																"referenceName": "ds_blob_landing_json",
																"type": "DatasetReference",
																"parameters": {}
															}
														],
														"outputs": [
															{
																"referenceName": "ds_dl_bronze_json",
																"type": "DatasetReference",
																"parameters": {}
															}
														]
													},
													{
														"name": "Copy data landing to archive json",
														"type": "Copy",
														"dependsOn": [
															{
																"activity": "Copy data landing to bronze json",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "JsonSource",
																"storeSettings": {
																	"type": "AzureBlobStorageReadSettings",
																	"recursive": true,
																	"wildcardFileName": "*.json",
																	"enablePartitionDiscovery": false
																},
																"formatSettings": {
																	"type": "JsonReadSettings"
																}
															},
															"sink": {
																"type": "JsonSink",
																"storeSettings": {
																	"type": "AzureBlobStorageWriteSettings"
																},
																"formatSettings": {
																	"type": "JsonWriteSettings"
																}
															},
															"enableStaging": false
														},
														"inputs": [
															{
																"referenceName": "ds_blob_landing_json",
																"type": "DatasetReference",
																"parameters": {}
															}
														],
														"outputs": [
															{
																"referenceName": "ds_blob_archive_json",
																"type": "DatasetReference",
																"parameters": {}
															}
														]
													},
													{
														"name": "Delete from landing json",
														"type": "Delete",
														"dependsOn": [
															{
																"activity": "Copy data landing to archive json",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataset": {
																"referenceName": "ds_blob_landing_json",
																"type": "DatasetReference",
																"parameters": {}
															},
															"enableLogging": false,
															"storeSettings": {
																"type": "AzureBlobStorageReadSettings",
																"recursive": true,
																"wildcardFileName": "*json",
																"enablePartitionDiscovery": false
															}
														}
													}
												]
											},
											{
												"value": "parquet",
												"activities": [
													{
														"name": "Copy data landing to bronze parquet",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "ParquetSource",
																"storeSettings": {
																	"type": "AzureBlobStorageReadSettings",
																	"recursive": true,
																	"wildcardFileName": "*.parquet",
																	"enablePartitionDiscovery": false
																},
																"formatSettings": {
																	"type": "ParquetReadSettings"
																}
															},
															"sink": {
																"type": "ParquetSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "ParquetWriteSettings"
																}
															},
															"enableStaging": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "ds_blob_landing_parquet",
																"type": "DatasetReference",
																"parameters": {}
															}
														],
														"outputs": [
															{
																"referenceName": "ds_dl_bronze_Parquet",
																"type": "DatasetReference",
																"parameters": {}
															}
														]
													},
													{
														"name": "Copy data landing to archive parquet",
														"type": "Copy",
														"dependsOn": [
															{
																"activity": "Copy data landing to bronze parquet",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "ParquetSource",
																"storeSettings": {
																	"type": "AzureBlobStorageReadSettings",
																	"recursive": true,
																	"wildcardFileName": "*.parquet",
																	"enablePartitionDiscovery": false
																},
																"formatSettings": {
																	"type": "ParquetReadSettings"
																}
															},
															"sink": {
																"type": "ParquetSink",
																"storeSettings": {
																	"type": "AzureBlobStorageWriteSettings"
																},
																"formatSettings": {
																	"type": "ParquetWriteSettings"
																}
															},
															"enableStaging": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "ds_blob_landing_parquet",
																"type": "DatasetReference",
																"parameters": {}
															}
														],
														"outputs": [
															{
																"referenceName": "ds_blob_archive_Parquet",
																"type": "DatasetReference",
																"parameters": {}
															}
														]
													},
													{
														"name": "Delete from landing parquet",
														"type": "Delete",
														"dependsOn": [
															{
																"activity": "Copy data landing to archive parquet",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataset": {
																"referenceName": "ds_blob_landing_parquet",
																"type": "DatasetReference",
																"parameters": {}
															},
															"enableLogging": false,
															"storeSettings": {
																"type": "AzureBlobStorageReadSettings",
																"recursive": true,
																"wildcardFileName": "*parquet",
																"enablePartitionDiscovery": false
															}
														}
													}
												]
											}
										],
										"defaultActivities": [
											{
												"name": "Wait1",
												"type": "Wait",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"waitTimeInSeconds": 1
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow_bronze_to_silver",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"OrderItems": {},
									"Customers": {},
									"Products": {},
									"Stores": {},
									"Orders": {},
									"sink1": {},
									"sink2": {},
									"sink3": {},
									"sink4": {},
									"sink5": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Data flow2",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Data flow1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow_silver_to_gold",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"OrderItems": {},
									"Customers": {},
									"Products": {},
									"Stores": {},
									"Orders": {},
									"sink1": {},
									"sink2": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-08-15T05:53:58Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow_bronze_to_silver')]",
				"[concat(variables('factoryId'), '/dataflows/dataflow_silver_to_gold')]"
			]
		}
	]
}